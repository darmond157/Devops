---
description: 
globs: 
alwaysApply: false
---
# Grafana Alloy Kubernetes Example Template

This template provides a comprehensive structure for creating a new Grafana Alloy example using Kubernetes. It is based on the Kubernetes Monitoring Helm chart which abstracts the need to configure Loki and deploys with best practices for monitoring Kubernetes clusters.

## Directory Structure

```
your-k8s-example-name/
├── k8s-monitoring-values.yml   # K8s monitoring helm chart values
├── loki-values.yml             # Loki helm chart values
├── grafana-values.yml          # Grafana helm chart values
├── kind.yml                    # Kind cluster configuration (optional)
├── README.md                   # Documentation for your example
└── [additional files...]       # Any additional files needed for your example
```

## Kubernetes Configuration Files

### Kind Cluster Configuration (kind.yml)

If you're using Kind for local development, you can use this configuration:

```yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
  extraPortMappings:
  - containerPort: 30000
    hostPort: 30000
```

### K8s Monitoring Helm Chart Values (k8s-monitoring-values.yml)

This file configures the Kubernetes Monitoring Helm chart with Alloy settings:

```yaml
---
cluster:
  name: example-monitoring

destinations:
  - name: loki
    type: loki
    url: http://loki-gateway.meta.svc.cluster.local/loki/api/v1/push

# Cluster Events Collection
clusterEvents:
  enabled: true
  collector: alloy-logs
  namespaces:
    - meta
    - default

# Node Logs Collection
nodeLogs:
  enabled: true
  collector: alloy-logs

# Pod Logs Collection
podLogs:
  enabled: true
  gatherMethod: kubernetesApi
  collector: alloy-logs
  labelsToKeep: ["app_kubernetes_io_name","container","instance","job","level","namespace","service_name","service_namespace","deployment_environment","deployment_environment_name"]
  structuredMetadata:
    pod: pod  # Set structured metadata "pod" from label "pod"
  namespaces:
    - meta
    - default

# Node Metrics Collection
nodeMetrics:
  enabled: true
  collector: alloy-metrics

# Pod Metrics Collection
podMetrics:
  enabled: true
  collector: alloy-metrics
  namespaces:
    - meta
    - default

# Kubernetes API Server Metrics
kubernetesMetrics:
  enabled: true
  collector: alloy-metrics

# Traces Collection (if applicable)
traces:
  enabled: true
  collector: alloy-receiver
  namespaces:
    - meta
    - default

# Profiles Collection (if applicable)
profiles:
  enabled: true
  collector: alloy-profiles
  namespaces:
    - meta
    - default

# Collectors Configuration
alloy-singleton:
  enabled: false

alloy-metrics:
  enabled: true
  alloy:
    clustering:
      enabled: true

alloy-logs:
  enabled: true
  alloy:
    mounts:
      varlog: true
    clustering:
      enabled: true

alloy-profiles:
  enabled: true
  alloy:
    clustering:
      enabled: true

alloy-receiver:
  enabled: true
  alloy:
    clustering:
      enabled: true
```

### Loki Helm Chart Values (loki-values.yml)

Configuration for the Loki Helm chart:

```yaml
---
loki:
  auth_enabled: false
  commonConfig:
    replication_factor: 1
  schemaConfig:
    configs:
      - from: 2024-01-01
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h
  ingester:
    chunk_encoding: snappy
  tracing:
    enabled: true
  pattern_ingester:
      enabled: true
  limits_config:
    allow_structured_metadata: true
    volume_enabled: true
  ruler:
    enable_api: true
  querier:
    max_concurrent: 4

minio:
  enabled: true
      
deploymentMode: SingleBinary
singleBinary:
  replicas: 1
  resources:
    limits:
      cpu: 4
      memory: 4Gi
    requests:
      cpu: 2
      memory: 2Gi
  extraEnv:
    - name: GOMEMLIMIT
      value: 3750MiB

chunksCache:
  writebackSizeLimit: 10MB

# Zero out replica counts of other deployment modes
backend:
  replicas: 0
read:
  replicas: 0
write:
  replicas: 0

ingester:
  replicas: 0
querier:
  replicas: 0
queryFrontend:
  replicas: 0
queryScheduler:
  replicas: 0
distributor:
  replicas: 0
compactor:
  replicas: 0
indexGateway:
  replicas: 0
bloomCompactor:
  replicas: 0
bloomGateway:
  replicas: 0
```

### Grafana Helm Chart Values (grafana-values.yml)

Configuration for the Grafana Helm chart:

```yaml
---
persistence:
  type: pvc
  enabled: true

# DO NOT DO THIS IN PRODUCTION USECASES
adminUser: admin
adminPassword: adminadminadmin
# CONSIDER USING AN EXISTING SECRET
# admin:
#  existingSecret: ""
#  userKey: admin-user
#  passwordKey: admin-password

service:
  enabled: true
  type: ClusterIP

datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: Loki
      type: loki
      access: proxy
      orgId: 1
      url: http://loki-gateway.meta.svc.cluster.local:80
      basicAuth: false
      isDefault: false
      version: 1
      editable: false
    - name: Prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://prometheus-server.meta.svc.cluster.local:80
      basicAuth: false
      isDefault: true
      version: 1
      editable: false
    - name: Tempo
      type: tempo
      access: proxy
      orgId: 1
      url: http://tempo.meta.svc.cluster.local:80
      basicAuth: false
      isDefault: false
      version: 1
      editable: false
```

## README Template

Here's a template for your example's README.md:

```markdown
# Your Kubernetes Example Name

Brief description of what this example demonstrates and its purpose.

## Prerequisites

- Kubernetes cluster (or Kind for local development)
- Helm (v3.x)
- kubectl

## Setup

### 1. Create a Kubernetes Cluster (Optional, if using Kind)

```bash
kind create cluster --config kind.yml
```

### 2. Create a Namespace for Monitoring

```bash
kubectl create namespace meta
```

### 3. Install Loki

Add the Grafana Helm repository if you haven't already:

```bash
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update
```

Install Loki:

```bash
helm install --values loki-values.yml loki grafana/loki -n meta
```

### 4. Install Grafana

```bash
helm install --values grafana-values.yml grafana grafana/grafana --namespace meta
```

### 5. Install Kubernetes Monitoring (with Alloy)

```bash
helm install --values ./k8s-monitoring-values.yml k8s grafana/k8s-monitoring -n meta
```

## Accessing the Dashboard

### Port Forward Grafana

```bash
kubectl port-forward -n meta svc/grafana 3000:80
```

Navigate to http://localhost:3000 in your browser. The default credentials are:
- Username: admin
- Password: adminadminadmin

## What to Expect

Describe what the user should see after setting up the example, including:
- What metrics/logs are being collected
- Any dashboards that are automatically set up
- How to interact with the example

## Cleanup

To remove the deployed resources:

```bash
helm uninstall k8s -n meta
helm uninstall grafana -n meta
helm uninstall loki -n meta
kubectl delete namespace meta
```

If you created a Kind cluster:

```bash
kind delete cluster
```
```

## Customizing Your Example

To create your own example:

1. Create a new directory with your example name at the root of the repository
2. Copy the template files from this template
3. Customize the files for your specific use case
4. Update the README.md with specific instructions for your example
5. Add your example to the main README.md table with a link and description

## Typical Use Cases for Kubernetes Examples

1. **Logs Collection**: Collecting and analyzing logs from applications running in Kubernetes
2. **Metrics Monitoring**: Monitoring application and infrastructure metrics
3. **Tracing**: Distributed tracing for microservices
4. **Profiling**: Performance profiling of applications
5. **Combined Observability**: Demonstrating how to use all telemetry types together

## Special Considerations for Kubernetes

- **Resource Limits**: Adjust resource requests and limits based on your cluster capacity
- **Persistent Storage**: Configure appropriate storage classes for your environment
- **Security**: In production environments, use proper authentication methods
- **Network Policies**: Consider adding network policies if required for your environment
